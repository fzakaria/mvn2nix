{ pkgs, makeWrapper, stdenv, lib, fetchurl, linkFarm }:
with lib; rec {
  # Create a maven environment from the output of the mvn2nix command
  # the resulting store path can be used as the a .m2 repository for subsequent
  # maven invocations.
  # ex.
  # 	mvn package --offline -Dmaven.repo.local=${dependencies}
  #
  # @param generated: The nix expression generated by mvn2nix
  buildMavenRepository = { generated }:
    let
      dependenciesAsDrv = (forEach (attrValues generated.dependencies)
        (dependency: {
          drv = fetchurl {
            url = dependency.url;
            sha256 = dependency.sha256;
          };
          layout = dependency.layout;
        }));
    in linkFarm "buildMavenRepository" (forEach dependenciesAsDrv (dependency: {
      name = dependency.layout;
      path = dependency.drv;
    }));

  # Execute maven and build the project.
  # A wrapper script will be created in the `bin` folder to execute the JAR.
  #
  # Make sure that the JAR is setup to search for classpaths in a repository layout.
  # ex.
  #             <plugin>
  #                  <artifactId>maven-jar-plugin</artifactId>
  #                  <version>3.2.0</version>
  #                  <configuration>
  #                      <archive>
  #                          <manifest>
  #                              <addClasspath>true</addClasspath>
  #                              <classpathPrefix>lib/</classpathPrefix>
  #                              <classpathLayoutType>repository</classpathLayoutType>
  #                              <mainClass>com.fzakaria.mvn2nix.Main</mainClass>
  #                          </manifest>
  #                          <manifestEntries>
  #                              <Class-Path>.</Class-Path>
  #                          </manifestEntries>
  #                      </archive>
  #                  </configuration>
  #              </plugin>
  #
  # @param maven: The maven version to use; defaults to the one pinned by mvn2nix
  # @param jdk: The JDK version to use; defaults to the one pinned by mvn2nix
  # @param generated: The nix expression generated by mvn2nix
  # @param repository: A maven repository; see buildMavenRepository above.
  # @param src: The src files to feed into maven
  buildMaven = { maven ? pkgs.maven, jdk ? pkgs.jdk, generated
    , repository ? buildMavenRepository { inherit generated; }
    , executable ? false, src }:
    let source = src;
    in stdenv.mkDerivation rec {
      pname = generated.project.name;
      version = generated.project.version;
      name = "${pname}-${version}";

      # we make sure to remove any CVS type data & /target which is generated by Maven
      src = lib.cleanSourceWith {
        filter = lib.cleanSourceFilter;
        src = lib.cleanSourceWith {
          filter = path: type:
            !(baseNameOf path == "target" && type == "directory");
          src = source;
        };
      };

      buildInputs = [ maven makeWrapper ];

      installPhase = ''
        JAVA_HOME=${jdk} mvn package --offline -Dmaven.repo.local=${repository}

        # create the bin directory
        mkdir -p $out/bin

        # create a symbolic link for the lib directory
        ln -s ${repository} $out/lib

        # copy out the JAR
        # Maven should have setup the classpath to use m2 repository layout
        # with the prefix of lib/
        cp target/${name}.jar $out/

        # create a wrapper that will automatically set the classpath
        # this should be the paths from the dependency derivation
        makeWrapper ${jdk}/bin/java $out/bin/${pname} \
              --add-flags "-jar $out/${name}.jar"
      '';
    };
}
